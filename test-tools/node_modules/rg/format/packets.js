'use strict';

let fs = require('fs');

let Future = require('../future');
let helper = require('./helper');

function parsePacket(line)
{
	line = line.trim();

	const separator = /"|\/\/ |\(|\);/;
	var args = line.split(separator);

	if (args.length !== 6)
		return;

	var signature = (args[1] || '').trim();
	var name = (args[3] || '').trim();
	var id = parseInt(args[4]);
	var description = (args[5] || '').trim();

	return helper.preparePacket(id, name, signature, description);
}

function parsePackets(data, resolve, reject)
{
	let lines =
		data.split('\n')
		.map((line) => line.trim())
		.filter((line) => line[0] === '"');

	let length = lines.length;
	let result = [];

	for (let i = 0; i < length; i++)
	{
		let packet = parsePacket(lines[i]);

		if (packet === undefined)
			return reject(`invalid packet '${lines[i]}'`);

		result.push(packet);
	}

	resolve(result);
}

function parseFile(path)
{
	return fs.readFileAsync(path, {encoding : 'utf8'}).then((data) => new Future(parsePackets.bind(null, data)));
}

function serialize(packets)
{
	return packets.map((packet) => `\t${packet}`).join(',\n');
}

function write(serverPackets, clientPackets, template, outputPath)
{
	template = template.replace('SERVER', serialize(serverPackets));
	template = template.replace('CLIENT', serialize(clientPackets));

	return fs.writeFileAsync(outputPath, template, {encoding : 'utf8'});
}

function generatePackets(serverPath, clientPath, templatePath, outputPath)
{
	let files =
	{
			server : parseFile(serverPath),
			client : parseFile(clientPath),
			template : fs.readFileAsync(templatePath, {encoding: 'utf8'})
	};

	Future.props(files)
		.then((files) => write(files.server, files.client, files.template, outputPath))
		.catch((error) =>{ console.error(error) });
}

module.exports =
{
	generatePackets : generatePackets
};